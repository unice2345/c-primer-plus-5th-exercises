10.1 数组
----------
数组(array)由一系列类型相同的元素构成。
数组声明(array declaration)中，包含元素数目和元素的数据类型。

float values[365];  
int number[12];
char code[26];

10.1.1 初始化
用花括号包含一系列数值，数值用逗号隔开：初始化列表

int powers[8] = {1, 2, 4, 8, 16, 32, 64, 128};

初始化列表中的元素数目应该和数组大小一致。
不一致呢？部分初始化：
int powers[8] = {1, 2, 4, 8};
编译器将多余的元素初始化为0

省略括号中的数字，编译器根据初始化列表元素数目自动匹配数字大小：
例子：
/* day_month2.c -- 让编译器计算元素个数 */
#include <stdio.h>

int main(void) 
{
    const int days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int index;
    
    for (index = 0; index < sizeof days / sizeof days[0]; index++)
        printf("Month %2d has %d days.\n", index + 1, days[index]);
    
    printf("\n---------------------------------------------\n");
    return 0;
}

10.1.4 数组边界
数组的计数从0开始
int values[20];
有效索引是0到19.
编译器不检查索引的合法性。


10.2 多维数组
----------------
二维数组：
float rain[5][12];

1)包含数组的数组。rain[5]是包含5个元素的数组，每个元素是一个包含12个元素的数组。
2)二维数组。5行12列。实际上是顺序存储的。

float rain[5][12] =
{
	{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}
};

访问二维数组:
for (i = 0; i < 5; i++) {
	for (j = 0; j < 12; j++) {
		printf("%5.2f ", rain[i][j]);
	}
	putchar('\n');
}


10.3 指针和数组
-----------------------
数组名也是该数组首元素的地址：
const int days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
days == &days[0]

对指针加1，等价于对指针的值加上它所指向的对象的字节的大小：
days + 2 == &days[2]
*(days + 2) == days[2]

可以用指针标识数组的每个元素，并得到每个元素的值：
/* day_month3.c -- 使用指针符号 */
#include <stdio.h>
#define MONTHS 12
int main(void) 
{
    const int days[MONTHS] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int index;
    
    for (index = 0; index < MONTHS; index++)
        printf("Month %2d has %d days.\n", index + 1, *(days +index));
    
    printf("\n---------------------------------------------\n");
    return 0;
}


10.4 函数、数组和指针
-------------------------
函数要对数组进行操作，如何传递数组参数？
要传递数组的地址和元素的数目
int sum(int * arr, int n);
int sum(int arr[], int n);

例子：
int sum(int arr[], int n)
{
    int i, sum = 0;
    
    for (i = 0; i < n; i++)
        sum += arr[i];
    return sum;
}

int sum2(int * arr, int n)
{
    int i, sum = 0;
    
    for (i = 0; i < n; i++)
        sum += *(arr + i);
    return sum;
}

printf("sum of arr is %d\n", sum(arr, SIZE));
printf("sum2 of arr is %d\n", sum2(arr, SIZE));

10.4.1 使用指针参数
还可以传入两个指针，一个指向数组的起始地址，一个指向数组的结束地址
int sum3(int * start, int * end)
{
    int sum = 0;
    while (start < end) {
        sum += *start++;
    }
    return sum;
}
printf("sum3 of arr is %d\n", sum3(arr, arr + SIZE));

end指针指向了数组arr之后的一个位置。指向该位置是合法的，但对该位置取值是非法的。
程序中，只引用该位置做指针比较，没有取值。

*和++具有相同优先级，但结合性是从右向左，所以*start++等价于*(start++);

10.4.2 评论：指针和数组
处理数组的函数实际上是用指针做参数的


10.5 指针操作
----------------
赋值(assignment)
    ptr1 = arr;     // 赋值(assignment)
    ptr2 = &arr[2]; // 赋值(assignment)

取值(derefrencing)
	*ptr1

取指针的地址：指针本身也是个变量，可以对这个变量再取地址
	&ptr1
	
指针加一个整数
	ptr1 + 4;    //整数会和指针指向对象类型的字节数相乘，再加到地址上；结果指向了n个元素后的位置。
	
递增指针
	ptr1++;      //指针指向了下一个元素。但ptr1变量本身的地址并未改变。
	
指针求差值(differencing)
	ptr2 - ptr1; //两个指针相减得到一个整数，是两个元素的距离。
	
	
/* ptr_ops.c -- 指针操作 */
#include <stdio.h>

int main(void) 
{
    int arr[5] = {100, 200, 300, 400, 500};
    int * ptr1, * ptr2, * ptr3;
    
    ptr1 = arr;     // 赋值(assignment)
    ptr2 = &arr[2]; // 赋值(assignment)
    
    printf("pointer value, dereferenced pointer, pointer address:\n");
    printf("ptr1 = %p, *ptr1 = %d, &ptr1 = %p\n", 
        ptr1, 
        *ptr1,      // 取值(derefrencing)
        &ptr1);     // 取指针的地址
    
    printf("\nadding an int to a pointer:\n");
    printf("ptr1 + 4 = %p, *(ptr1 + 4) = %d\n",
        ptr1 + 4,   // 指针加一个整数
        *(ptr1 + 4) 
    );
    
    ptr1++;         // 递增指针
    printf("\nvalues after ptr++\n");
    printf("ptr1 = %p, *ptr1 = %d, &ptr1 = %p\n", 
        ptr1, 
        *ptr1,      
        &ptr1);     
    
    printf("\nsubtracting one pointer from another:\n");
    printf("ptr2 = %p, ptr1 = %p, ptr2 - ptr1 = %d\n",
        ptr2,
        ptr1,
        ptr2 - ptr1 // 两个指针相减 
    );
    printf("\n---------------------------------------------\n");
    return 0;
}


10.6 保护数组内容
--------------------
传递数组的指针给函数，函数内部可以修改数组的内容

10.6.1 对形式参量使用const 
int sum(const int arr[], int n);  /* 原型 */

int sum(const int arr[], int n) /* 定义 */
{
    int i, sum = 0;
    
    for (i = 0; i < n; i++)
        sum += arr[i];
    return sum;
}

告知编译器: arr数组是常量数据的数组。此时通过arr修改数组内容，会产生编译错误。

函数需要将数组当作常量数据对待，可以用const修饰形式参量
	数组实际并不需要是常量，只是函数需要将其作为常量对待
	
10.6.2 有关const的其他内容
创建符号常量:
	const double PI = 3.1415926;

创建数组常量:
	const int days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31 30, 31};
	
创建指向常量的指针: 不能通过该指针修改指向的数据的内容
	int arr[5] = {1, 2, 3, 4, 5};
	const int * ptr = arr;
	
	*ptr = 6;   // 不允许
	ptr[2] = 6; // 不允许
	arr[0] = 6; // 允许，arr不是常量
	
	但是，可以让该指针指向其他地址:
	ptr++;          // 允许
	ptr = &arr[3];  // 允许
	
	通常将指向常量的指针用作函数的参量，表明函数不会通过该指针修改数据:
	void show_array(const double * arr, int n);
	
	赋值规则:
		常量或者非常量数据的地址都可以赋给指向常量的指针:
		int arr[5] = {1, 2, 3, 4, 5};
		const int const_arr[5] = {1, 2, 3, 4, 5};
		const int * ptr = arr;  // 允许
		ptr = const_arr;        // 允许
		
		非常量数据的地址才可以赋值给普通指针，常量数据地址不能赋值给普通指针
		int arr[5] = {1, 2, 3, 4, 5};
		const int const_arr[5] = {1, 2, 3, 4, 5};
		int * ptr = arr;        // 允许
		ptr = const_arr;        // 不允许
		
		结果：
			以指向常量的指针作形参的函数，可以接受普通数组和常量数组作为实际参数
			void show_array(const int *, int);
			show_array(arr, 5);          // 允许
			show_array(const_arr, 5);    // 允许 
			
			以普通指针作形参的函数，只能接受普通数组，不能接收常量数组作为实际参数
			void change_array(int *, int);
			change_array(arr, 5);        // 允许
			change_array(const_arr, 5);  // 不允许
			
创建指针常量：(const位于*的右侧)指针不能再指向其他数据
	int arr[5] = {1, 2, 3, 4, 5};
	int * const ptr = arr;
	ptr = &arr[1];  // 不允许，ptr是常量
	ptr[0] = 6;     // 允许，ptr指向的数据并不是常量，可以修改
	
创建指向常量数据的指针常量: 数据和指针本身都不能被修改
	int arr[5] = {1, 2, 3, 4, 5};
	const int * const prt = arr;
	ptr = &arr[1];  // 不允许，ptr是常量
	ptr[0] = 6;     // 不允许，ptr指向的数据也需当做常量对待
	
	
10.7 指针和多维数组
int zippo[4][2];

数组名是首元素的地址。zippo的首元素是一个包含两个int值的数组，zippo也是这个数组的地址。

zippo类型： int (*)[2], 指向数组的指针
	zippo + 1: 指向下一个数组的指针
*zippo类型:  int *， 数组，即指针常量
	*zippo + 1：指向数组中的下一个整型元素的指针
**zippo类型: int, 整型
	**zippo + 1: 对整型值加1
	
注意: zippo与*zippo的值相等(同一个地址，zippo和*zippo都是地址)，但是类型不同。所以zippo+1和*zippo+1的值是不同的。	
	----------------------------------
	| zippo/*zippo   | *zippo + 1    |    
	----------------------------------
	| zippo + 1      |               |    
	----------------------------------
	|                |               |    
	----------------------------------
	|                |               |    
	----------------------------------
	

例子：
/* zippo1.c -- 指向多维数组的指针 */
#include <stdio.h>

int main(void) 
{
    int zippo[4][2] = {{1, 2}, {3, 4}, {5, 6}, {7, 8}};

    printf("zippo = %p, zippo + 1 = %p\n", zippo, zippo + 1);
    printf("*zippo = %p, *zippo + 1 = %p\n", *zippo, *zippo + 1);
    printf("**zippo = %d, **(zippo+1) = %d, *(*zippo+1) = %d\n", 
        **zippo, **(zippo+1), *(*zippo+1));
	printf("zippo's value is %x, *zippo's value is %x\n", zippo, *zippo);
    
    printf("\n---------------------------------------------\n");
    return 0;
}

另一种解释：
int aa[4][2];
	aa是指向int a[4]的指针；
	aa和a0指向同一处内存地址，并且有*aa == a0,即对aa取值得到a0的值。由于aa和a0指向同一处内存地址，*aa的值和aa的值相同。
	注意：对指针取值之后，数据类型发生了变化！！！！
	aa是int (*)[2]类型，取值后*aa变成了int *类型，二者的数据类型发生了变化。但是二者指向同一处内存地址，所以值仍然相同。
	
	aa+1也是int (*)[2]类型，取值之后*(aa+1)变成int [2]数组类型；
	*aa + 1是int *类型；*(aa+1)和*aa+1的类型相同，但它们的地址不同，*(aa+1)指向第二个数组的第一个元素；*aa+1指向一个数组的第2个元素。
	
	
  aa	 aa+1                         -> int (*)[2]类型指针
---------------------------------
|   |   |   |   |   |   |   |   |
---------------------------------   	
  a0      a1      a2     a3           -> int *类型指针
 *aa    *(aa+1)
  
附录：如何使不同的指针类型指向同一处地址？
    int ** ppn;
    int * pn;
    int n;
    
    pn = &n;
    ppn = (int**)pn;   // 使ppn指向n所在的地址
    *ppn = pn;         // 使*ppn也指向n所在的地址
    printf("pn = %p, ppn = %p, *ppn = %p\n", pn, ppn, *ppn);
	
  
10.7.1 指向数组的指针
int (*pz)[2]

例子：
/* zippo2.c -- 指向多维数组的指针 */
#include <stdio.h>

int main(void) 
{
    int zippo[4][3] = {
        {1, 2, 12}, 
        {3, 4, 34}, 
        {5, 6, 56}, 
        {7, 8, 78}
    };
    int (*pz)[3];  // pz是一个数组，其中的每个元素是int arr[2]类型
    
    pz = zippo;
    
    printf("p[0][1] = %d\n", pz[0][1]);
    printf("p[0][1] = %d\n", *(*pz + 1));
    printf("p[1][2] = %d\n", pz[1][2]);
    printf("p[1][2] = %d\n", *(*(pz + 1) + 2));
    
    
    printf("\n---------------------------------------------\n");
    return 0;
}
	
	
pz[m][n] == *(*(pz + m) + n)	

10.7.3 函数和多维数组
void function(int (*pt)[4]);
或者
void function(int pt[][4]);

void function(int pt[3][4]); // 合法，但编译器会忽略3