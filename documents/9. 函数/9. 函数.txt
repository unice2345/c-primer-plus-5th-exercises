
9.1 函数概述
----------------
函数：完成特定任务的程序代码。
作用：1） 避免重复代码；
	  2） 模块化
	  
9.1.1 例子

#include <stdio.h>
#define WIDTH 40

void starbar(void);  /* 声明函数原型 */

int main(void)
{
	printf("I will use funtion.\n");
	starbar()        /* 调用函数 */
	printf("Funtion is easy to use.\n");
	return 0;
}

void starbar(void)   /* 函数定义 */
{
	int count;
	
	for (count = 1; count < WIDTH; count++)
		putchar('*');
	putchar('\n');
}

9.1.2 分析
函数原型(funtion prototype)告知编译器函数的类型
函数调用(funtion call)导致该函数的执行
函数定义(funtion definition)指定了函数具体功能

函数原型：
void starbar(void)；
函数名：startbar
函数类型(返回值类型)： void
参数类型: void
分号：表示这是函数声明，而非定义。通知编译器在其他位置寻找函数的定义

函数原型可以置于main函数之前，也可以在main函数内部

函数调用:
starbar();
调用时，找到函数定义，执行其中语句；执行完毕后，返回到调用函数(calling funtion)处的下一行，继续执行。

函数定义：
函数名+花括号+函数体

花括号后没有分号，表明这是函数定义
局部(local)变量: 函数内部变量，只在函数内部使用，不会与外部的同名变量冲突

9.1.3 函数参数

例子：
#include <stdio.h>

void show_n_char(char ch, int num);

int main(void)
{
	int count = 40;
	show_n_char('*', count);
	printf("I'd like to print some spaces.\n");
	show_n_char(' ', count +10);
	
	return 0;
}

void show_n_char(char ch, int num)
{
	int count;
	
	for (count = 1; count < num; count++)
		putchar(ch);		
}

9.1.4 形式参量
void show_n_char(char ch, int num)
形式参量(formal argument)或形式参数(formal parameter): ch, num
形式参量是局部变量，函数调用时，它们会被赋值

show_n_char('*', count);
相当于ch = '*', num = count;

函数声明时可以省略参量名字，但需要有参量的类型:
void show_n_char(ch, int);

9.1.6 实际参数
实际参数(actual argument)
函数调用时，将实际参数的值赋给形式参数
show_n_char('*', count);
相当于ch = '*', num = count;
'*'和count是实际参数

实际参数可以是常量、变量、表达式
show_n_char(' ', count +10);

实际参数的值不受函数内部运算的影响。
例子：
略。（形式参数与实际参数同名）

9.1.8 使用return从函数中返回一个值
int imin(int n, int m)
{
	int min;
	if (n < m)
		min = n;
	else
		min = m;
	return min;
}

关键字return表明其后的表达式是该函数的返回值
return将函数的返回值返回给调用函数。
调用函数可以使用函数的返回值。

int lesser = imin(n, m);

实际返回值的类型与函数声明返回值的类型不同时：转换为函数声明返回值类型
int what_if(int n)
{
	double z = 100.0 / (double)n;
	return z;
}

result = what_if(64);

return语句终止函数，后面的语句不被执行。
例子：略




9.5 地址运算符
-------------------
指针(pointer),用来存储地址的变量。
&: 取得变量的存储地址
%p: 输出地址的说明符，十六进制输出

/* loccheck.c -- 查看变量的存储地址 */
#include <stdio.h>
void loccheck(int);    /* 函数声明 */
int main(void) 
{
    int x = 2;
    int y = x;
    
    printf("In main(), x = %d, &x = %p\n", x, &x);
    printf("In main(), y = %d, &y = %p\n", y, &y);
    loccheck(x);
    
    printf("\n---------------------------------------------\n");
    return 0;
}

void loccheck(int x)
{
    int y = x;
    
    printf("In loccheck(), x = %d, &x = %p\n", x, &x);
    printf("In loccheck(), y = %d, &y = %p\n", y, &y);
}

实参x和形参x的地址也不同


9.7 指针简介
---------------
指针是一个其数值为地址的变量。
int变量的数值是整数，指针变量的数值是地址。

ptr = &x

9.7.1 间接运算符: *
ptr = &x
使用间接(indirection)运算符* (也叫取值(dereferencing)运算符),来获取x中存放的数值
val = *ptr;
与val = x等价

9.7.2 指针声明
声明指针，需要说明指针所指向变量的类型。因为不同变量的类型占用存储空间大小不同。
int * pi;   /*pi是一个指向整型变量的指针*/
char * pc;  /*pc是一个指向字符变量的指针*/
float * pf; /*pf是一个指向浮点变量的指针*/

类型标识符表明了被指向变量的类型，而星号（*）表示该变量为一指针。

char * pc;
pc的类型：指向char的指针。指针是一种新的数据类型。
pc的值是一个地址，一般用无符号整数表示。但不能作为整数进行运算，因为指针是一种新的数据类型。


9.7.3 利用指针在函数间通信
/* swap3.c -- 使用指针完成交换 */
#include <stdio.h>
void interchange(int * u, int * v);
int main(void) 
{
    int x = 5, y = 10;
    printf("Originally x = %d, y = %d\n", x, y);
    interchange(&x, &y);  /* 向函数传入变量的地址 */
    printf("Now x = %d, y = %d\n", x, y);
    printf("\n---------------------------------------------\n");
    return 0;
}

void interchange(int * u, int * v)
{
    int temp;
    
    temp = *u;
    *u = *v;
    *v = temp;
}
