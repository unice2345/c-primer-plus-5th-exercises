
5.2 基本运算符
---------------

运算符(operator)：= + - * /

5.2.1 赋值运算符(assignment operator) =
将右边的值赋给左边的“可修改的左值”
bmw = 2002;
i = i + 1;


术语：数据对象、左值、右值、操作数
数据对象(data object): 数据存储区，能保存值

左值(lvalue): 标识一个数据对象，可以是名字或者表达式
    不是所有的对象都是可修改的

右值(rvalue): 能赋给可修改的左值的量，可以是常量、变量、表达式

操作数（operand）:运算符操作的对象


赋值是从右向左进行的

5.2.2 加法运算符(addition operator) +
4 + 20
income = salary + bribes;

5.2.3 减法运算符(subtraction operator) -
takehome = 224.0 - 24.0

+ -都是二元(binary)运算符，因为它们需要两个操作数

5.2.4 符号运算符: -和+
rocky = -12;
一元(unary)运算符, 因为它们只需要一个操作数

5.2.5 乘法运算符 *
cm = 2.54 * inch;

5.2.6 除法运算符 /
浮点数除法：得到浮点数
整数除法：  得到整数 （小数部分被丢弃，称为截尾(truncation)）

5 / 4 is 1
6 / 3 is 2
7.0 / 4.0 is 1.75
7.0 / 4 is 1.75

5.2.7 运算符优先级

优先级递减

运算符             结合性
()				   从左到右
+ -(一元)		   从右到左
* /                从左到右
+ -(二元)          从左到右
=                  从右到左

结合规则适用于共享同一操作数的运算符：
y = 6 * 12 + 5 * 20; //不共享操作数
x = 12 / 3 * 2; // 3被/和*运算符共享，二者优先级相同，按结合性从左到右计算



5.3 其他运算符
-----------------
5.3.1 sizeof运算符和size_t类型
sizeof: 以字节为单位返回操作数的大小,操作数可以是数据对象或类型
	如果操作数是类型，需放在括号中
	sizeof x;      sizeof(int)

size_t: sizeof的返回类型，无符号整型。通过typedef定义。以%zd作为printf说明符。

5.3.2 取模运算符(modulus operator)
只能用于整数运算
11 % 5 is 1

5.3.3 自增自减运算符: ++ --
增量运算符(increment operator): ++
前缀(prefix)模式: y = ++x; //使用x之前改变x的值
后缀(postfix)模式：y = x++；//使用x之后改变x的值

减量运算符(decrement operator): 同理

优先级：只有()比它们的优先级高

注意：
当一个变量出现在同一个函数的多个参数时，不要使用自增自减运算符；
当一个变量多次出现在一个表达式里时，不要使用自增自减运算符.

y = f(n++, n++)
y = n++ + n++;

因为编译器无法确定执行顺序，会产生不确定的结果。


5.4 表达式和语句
------------------
5.4.1 表达式(expression)
表达式由运算符和操作数结合组成：
4
-6
4 + 21
a * (b + c)
x = 5 * 2
q > 3

!!!每个表达式都有一个值
赋值表达式的值：与左边变量取得的值相同   c = 3 + 8
比较表达式: 1或0                         5 > 3

5.4.2 语句(statement)
语句:构造程序的基本成分，C中语句的结束处用分号标识。一条语句至少是一个完整的计算机指令。
legs = 4           表达式
legs = 4;          语句

声明语句:   int count;
赋值语句:   count = 0;
函数语句:   printf("hello");   引起函数执行
结构化语句:  while(count < 10) count++；
        
副作用和顺序点
副作用(side effect): 对数据对象和文件的修改
state = 50; //主作用，对表达式求值；副作用，state的值被修改

顺序点(sequence point): 程序执行过程的某一点，在该点处，所有副作用都在下一步前计算生效。
分号是顺序点；
完整表达式是顺序点。

n = 10;  // 分号是顺序点
printf("%d\n", n);

while(n++ < 10) // n++ < 10是完整表达式，这里是顺序点
	printf("%d\n", n);
	
y = n++ + (n++); // 第一个n++都不是完整表达式，没有分号，所以不是顺序点

5.4.3 复合语句(compoun statement)或代码块(block)
用花括号组织起来的多个语句


5.5 类型转换
------------------
1) 表达式中的char和short自动被转换为int，称为提升(promotion);
2) 包含两种数据类型的运算中，值被转换为较高级别；
3) 级别：long double > double > float > unsigned long long > long long > unsigned long > long > unsigned int > int 
4) 赋值语句中，赋值结果被转换为被赋值的变量类型；
5) 值作为函数参数时， char,short被转换为int, float被转换为double.

指派运算符(cast)
（type）

mice = (int)1.67


5.6 带有参数的函数
------------------
void pound(int n) {}
pound(times);

形式参数(formal argument), 形式参量（formal parameter）: n
实际参数(actual argument), 实际参量(actual parameter)： times
函数创造形参，并将实参赋值给形参














